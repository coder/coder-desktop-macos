//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: Coder Desktop/FSLib/daemon.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Daemon_DaemonClient`, then call methods of this protocol to make API calls.
internal protocol Daemon_DaemonClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Daemon_DaemonClientInterceptorFactoryProtocol? { get }

  func terminate(
    _ request: Daemon_TerminateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Daemon_TerminateRequest, Daemon_TerminateResponse>
}

extension Daemon_DaemonClientProtocol {
  internal var serviceName: String {
    return "daemon.Daemon"
  }

  /// Unary call to Terminate
  ///
  /// - Parameters:
  ///   - request: Request to send to Terminate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func terminate(
    _ request: Daemon_TerminateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Daemon_TerminateRequest, Daemon_TerminateResponse> {
    return self.makeUnaryCall(
      path: Daemon_DaemonClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Daemon_DaemonClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Daemon_DaemonNIOClient")
internal final class Daemon_DaemonClient: Daemon_DaemonClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Daemon_DaemonClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Daemon_DaemonClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the daemon.Daemon service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Daemon_DaemonClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Daemon_DaemonNIOClient: Daemon_DaemonClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Daemon_DaemonClientInterceptorFactoryProtocol?

  /// Creates a client for the daemon.Daemon service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Daemon_DaemonClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Daemon_DaemonAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Daemon_DaemonClientInterceptorFactoryProtocol? { get }

  func makeTerminateCall(
    _ request: Daemon_TerminateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Daemon_TerminateRequest, Daemon_TerminateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Daemon_DaemonAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Daemon_DaemonClientMetadata.serviceDescriptor
  }

  internal var interceptors: Daemon_DaemonClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeTerminateCall(
    _ request: Daemon_TerminateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Daemon_TerminateRequest, Daemon_TerminateResponse> {
    return self.makeAsyncUnaryCall(
      path: Daemon_DaemonClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Daemon_DaemonAsyncClientProtocol {
  internal func terminate(
    _ request: Daemon_TerminateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Daemon_TerminateResponse {
    return try await self.performAsyncUnaryCall(
      path: Daemon_DaemonClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Daemon_DaemonAsyncClient: Daemon_DaemonAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Daemon_DaemonClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Daemon_DaemonClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Daemon_DaemonClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'terminate'.
  func makeTerminateInterceptors() -> [ClientInterceptor<Daemon_TerminateRequest, Daemon_TerminateResponse>]
}

internal enum Daemon_DaemonClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Daemon",
    fullName: "daemon.Daemon",
    methods: [
      Daemon_DaemonClientMetadata.Methods.terminate,
    ]
  )

  internal enum Methods {
    internal static let terminate = GRPCMethodDescriptor(
      name: "Terminate",
      path: "/daemon.Daemon/Terminate",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Daemon_DaemonProvider: CallHandlerProvider {
  var interceptors: Daemon_DaemonServerInterceptorFactoryProtocol? { get }

  func terminate(request: Daemon_TerminateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Daemon_TerminateResponse>
}

extension Daemon_DaemonProvider {
  internal var serviceName: Substring {
    return Daemon_DaemonServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Terminate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Daemon_TerminateRequest>(),
        responseSerializer: ProtobufSerializer<Daemon_TerminateResponse>(),
        interceptors: self.interceptors?.makeTerminateInterceptors() ?? [],
        userFunction: self.terminate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Daemon_DaemonAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Daemon_DaemonServerInterceptorFactoryProtocol? { get }

  func terminate(
    request: Daemon_TerminateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Daemon_TerminateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Daemon_DaemonAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Daemon_DaemonServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Daemon_DaemonServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Daemon_DaemonServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Terminate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Daemon_TerminateRequest>(),
        responseSerializer: ProtobufSerializer<Daemon_TerminateResponse>(),
        interceptors: self.interceptors?.makeTerminateInterceptors() ?? [],
        wrapping: { try await self.terminate(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Daemon_DaemonServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'terminate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTerminateInterceptors() -> [ServerInterceptor<Daemon_TerminateRequest, Daemon_TerminateResponse>]
}

internal enum Daemon_DaemonServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Daemon",
    fullName: "daemon.Daemon",
    methods: [
      Daemon_DaemonServerMetadata.Methods.terminate,
    ]
  )

  internal enum Methods {
    internal static let terminate = GRPCMethodDescriptor(
      name: "Terminate",
      path: "/daemon.Daemon/Terminate",
      type: GRPCCallType.unary
    )
  }
}
