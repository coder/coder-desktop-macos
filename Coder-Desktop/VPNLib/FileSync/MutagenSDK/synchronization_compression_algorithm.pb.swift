// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: synchronization_compression_algorithm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// This file was taken from
// https://github.com/coder/mutagen/tree/v0.18.3/pkg/synchronization/compression/algorithm.proto
//
// MIT License
// 
// Copyright (c) 2016-present Docker, Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Algorithm specifies a compression algorithm.
enum Compression_Algorithm: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Algorithm_AlgorithmDefault represents an unspecified compression
  /// algorithm. It should be converted to one of the following values based on
  /// the desired default behavior.
  case `default` // = 0

  /// Algorithm_AlgorithmNone specifies that no compression should be used.
  case none // = 1

  /// Algorithm_AlgorithmDeflate specifies that DEFLATE compression should be
  /// used.
  case deflate // = 2

  /// Algorithm_AlgorithmZstandard specifies that Zstandard compression should
  /// be used.
  case zstandard // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .default
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .none
    case 2: self = .deflate
    case 3: self = .zstandard
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .default: return 0
    case .none: return 1
    case .deflate: return 2
    case .zstandard: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Compression_Algorithm] = [
    .default,
    .none,
    .deflate,
    .zstandard,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Compression_Algorithm: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AlgorithmDefault"),
    1: .same(proto: "AlgorithmNone"),
    2: .same(proto: "AlgorithmDeflate"),
    3: .same(proto: "AlgorithmZstandard"),
  ]
}
