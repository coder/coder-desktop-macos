//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: service_synchronization_synchronization.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Synchronization manages the lifecycle of synchronization sessions.
///
/// Usage: instantiate `Synchronization_SynchronizationClient`, then call methods of this protocol to make API calls.
internal protocol Synchronization_SynchronizationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol? { get }

  func create(
    _ request: Synchronization_CreateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Synchronization_CreateRequest, Synchronization_CreateResponse>

  func list(
    _ request: Synchronization_ListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Synchronization_ListRequest, Synchronization_ListResponse>

  func flush(
    _ request: Synchronization_FlushRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Synchronization_FlushRequest, Synchronization_FlushResponse>

  func pause(
    _ request: Synchronization_PauseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Synchronization_PauseRequest, Synchronization_PauseResponse>

  func resume(
    _ request: Synchronization_ResumeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Synchronization_ResumeRequest, Synchronization_ResumeResponse>

  func reset(
    _ request: Synchronization_ResetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Synchronization_ResetRequest, Synchronization_ResetResponse>

  func terminate(
    _ request: Synchronization_TerminateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Synchronization_TerminateRequest, Synchronization_TerminateResponse>
}

extension Synchronization_SynchronizationClientProtocol {
  internal var serviceName: String {
    return "synchronization.Synchronization"
  }

  /// Create creates a new session.
  ///
  /// - Parameters:
  ///   - request: Request to send to Create.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func create(
    _ request: Synchronization_CreateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Synchronization_CreateRequest, Synchronization_CreateResponse> {
    return self.makeUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  /// List returns metadata for existing sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func list(
    _ request: Synchronization_ListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Synchronization_ListRequest, Synchronization_ListResponse> {
    return self.makeUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  /// Flush flushes sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Flush.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func flush(
    _ request: Synchronization_FlushRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Synchronization_FlushRequest, Synchronization_FlushResponse> {
    return self.makeUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.flush.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushInterceptors() ?? []
    )
  }

  /// Pause pauses sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pause.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pause(
    _ request: Synchronization_PauseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Synchronization_PauseRequest, Synchronization_PauseResponse> {
    return self.makeUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.pause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseInterceptors() ?? []
    )
  }

  /// Resume resumes paused or disconnected sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Resume.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resume(
    _ request: Synchronization_ResumeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Synchronization_ResumeRequest, Synchronization_ResumeResponse> {
    return self.makeUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.resume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResumeInterceptors() ?? []
    )
  }

  /// Reset resets sessions' histories.
  ///
  /// - Parameters:
  ///   - request: Request to send to Reset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reset(
    _ request: Synchronization_ResetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Synchronization_ResetRequest, Synchronization_ResetResponse> {
    return self.makeUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.reset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetInterceptors() ?? []
    )
  }

  /// Terminate terminates sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Terminate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func terminate(
    _ request: Synchronization_TerminateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Synchronization_TerminateRequest, Synchronization_TerminateResponse> {
    return self.makeUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Synchronization_SynchronizationClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Synchronization_SynchronizationNIOClient")
internal final class Synchronization_SynchronizationClient: Synchronization_SynchronizationClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the synchronization.Synchronization service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Synchronization_SynchronizationNIOClient: Synchronization_SynchronizationClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol?

  /// Creates a client for the synchronization.Synchronization service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Synchronization manages the lifecycle of synchronization sessions.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Synchronization_SynchronizationAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol? { get }

  func makeCreateCall(
    _ request: Synchronization_CreateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Synchronization_CreateRequest, Synchronization_CreateResponse>

  func makeListCall(
    _ request: Synchronization_ListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Synchronization_ListRequest, Synchronization_ListResponse>

  func makeFlushCall(
    _ request: Synchronization_FlushRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Synchronization_FlushRequest, Synchronization_FlushResponse>

  func makePauseCall(
    _ request: Synchronization_PauseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Synchronization_PauseRequest, Synchronization_PauseResponse>

  func makeResumeCall(
    _ request: Synchronization_ResumeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Synchronization_ResumeRequest, Synchronization_ResumeResponse>

  func makeResetCall(
    _ request: Synchronization_ResetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Synchronization_ResetRequest, Synchronization_ResetResponse>

  func makeTerminateCall(
    _ request: Synchronization_TerminateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Synchronization_TerminateRequest, Synchronization_TerminateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Synchronization_SynchronizationAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Synchronization_SynchronizationClientMetadata.serviceDescriptor
  }

  internal var interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateCall(
    _ request: Synchronization_CreateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Synchronization_CreateRequest, Synchronization_CreateResponse> {
    return self.makeAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  internal func makeListCall(
    _ request: Synchronization_ListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Synchronization_ListRequest, Synchronization_ListResponse> {
    return self.makeAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  internal func makeFlushCall(
    _ request: Synchronization_FlushRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Synchronization_FlushRequest, Synchronization_FlushResponse> {
    return self.makeAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.flush.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushInterceptors() ?? []
    )
  }

  internal func makePauseCall(
    _ request: Synchronization_PauseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Synchronization_PauseRequest, Synchronization_PauseResponse> {
    return self.makeAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.pause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseInterceptors() ?? []
    )
  }

  internal func makeResumeCall(
    _ request: Synchronization_ResumeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Synchronization_ResumeRequest, Synchronization_ResumeResponse> {
    return self.makeAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.resume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResumeInterceptors() ?? []
    )
  }

  internal func makeResetCall(
    _ request: Synchronization_ResetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Synchronization_ResetRequest, Synchronization_ResetResponse> {
    return self.makeAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.reset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetInterceptors() ?? []
    )
  }

  internal func makeTerminateCall(
    _ request: Synchronization_TerminateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Synchronization_TerminateRequest, Synchronization_TerminateResponse> {
    return self.makeAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Synchronization_SynchronizationAsyncClientProtocol {
  internal func create(
    _ request: Synchronization_CreateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Synchronization_CreateResponse {
    return try await self.performAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  internal func list(
    _ request: Synchronization_ListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Synchronization_ListResponse {
    return try await self.performAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  internal func flush(
    _ request: Synchronization_FlushRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Synchronization_FlushResponse {
    return try await self.performAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.flush.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushInterceptors() ?? []
    )
  }

  internal func pause(
    _ request: Synchronization_PauseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Synchronization_PauseResponse {
    return try await self.performAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.pause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseInterceptors() ?? []
    )
  }

  internal func resume(
    _ request: Synchronization_ResumeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Synchronization_ResumeResponse {
    return try await self.performAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.resume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResumeInterceptors() ?? []
    )
  }

  internal func reset(
    _ request: Synchronization_ResetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Synchronization_ResetResponse {
    return try await self.performAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.reset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetInterceptors() ?? []
    )
  }

  internal func terminate(
    _ request: Synchronization_TerminateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Synchronization_TerminateResponse {
    return try await self.performAsyncUnaryCall(
      path: Synchronization_SynchronizationClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Synchronization_SynchronizationAsyncClient: Synchronization_SynchronizationAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Synchronization_SynchronizationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Synchronization_SynchronizationClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'create'.
  func makeCreateInterceptors() -> [ClientInterceptor<Synchronization_CreateRequest, Synchronization_CreateResponse>]

  /// - Returns: Interceptors to use when invoking 'list'.
  func makeListInterceptors() -> [ClientInterceptor<Synchronization_ListRequest, Synchronization_ListResponse>]

  /// - Returns: Interceptors to use when invoking 'flush'.
  func makeFlushInterceptors() -> [ClientInterceptor<Synchronization_FlushRequest, Synchronization_FlushResponse>]

  /// - Returns: Interceptors to use when invoking 'pause'.
  func makePauseInterceptors() -> [ClientInterceptor<Synchronization_PauseRequest, Synchronization_PauseResponse>]

  /// - Returns: Interceptors to use when invoking 'resume'.
  func makeResumeInterceptors() -> [ClientInterceptor<Synchronization_ResumeRequest, Synchronization_ResumeResponse>]

  /// - Returns: Interceptors to use when invoking 'reset'.
  func makeResetInterceptors() -> [ClientInterceptor<Synchronization_ResetRequest, Synchronization_ResetResponse>]

  /// - Returns: Interceptors to use when invoking 'terminate'.
  func makeTerminateInterceptors() -> [ClientInterceptor<Synchronization_TerminateRequest, Synchronization_TerminateResponse>]
}

internal enum Synchronization_SynchronizationClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Synchronization",
    fullName: "synchronization.Synchronization",
    methods: [
      Synchronization_SynchronizationClientMetadata.Methods.create,
      Synchronization_SynchronizationClientMetadata.Methods.list,
      Synchronization_SynchronizationClientMetadata.Methods.flush,
      Synchronization_SynchronizationClientMetadata.Methods.pause,
      Synchronization_SynchronizationClientMetadata.Methods.resume,
      Synchronization_SynchronizationClientMetadata.Methods.reset,
      Synchronization_SynchronizationClientMetadata.Methods.terminate,
    ]
  )

  internal enum Methods {
    internal static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/synchronization.Synchronization/Create",
      type: GRPCCallType.unary
    )

    internal static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/synchronization.Synchronization/List",
      type: GRPCCallType.unary
    )

    internal static let flush = GRPCMethodDescriptor(
      name: "Flush",
      path: "/synchronization.Synchronization/Flush",
      type: GRPCCallType.unary
    )

    internal static let pause = GRPCMethodDescriptor(
      name: "Pause",
      path: "/synchronization.Synchronization/Pause",
      type: GRPCCallType.unary
    )

    internal static let resume = GRPCMethodDescriptor(
      name: "Resume",
      path: "/synchronization.Synchronization/Resume",
      type: GRPCCallType.unary
    )

    internal static let reset = GRPCMethodDescriptor(
      name: "Reset",
      path: "/synchronization.Synchronization/Reset",
      type: GRPCCallType.unary
    )

    internal static let terminate = GRPCMethodDescriptor(
      name: "Terminate",
      path: "/synchronization.Synchronization/Terminate",
      type: GRPCCallType.unary
    )
  }
}

/// Synchronization manages the lifecycle of synchronization sessions.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Synchronization_SynchronizationProvider: CallHandlerProvider {
  var interceptors: Synchronization_SynchronizationServerInterceptorFactoryProtocol? { get }

  /// Create creates a new session.
  func create(request: Synchronization_CreateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Synchronization_CreateResponse>

  /// List returns metadata for existing sessions.
  func list(request: Synchronization_ListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Synchronization_ListResponse>

  /// Flush flushes sessions.
  func flush(request: Synchronization_FlushRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Synchronization_FlushResponse>

  /// Pause pauses sessions.
  func pause(request: Synchronization_PauseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Synchronization_PauseResponse>

  /// Resume resumes paused or disconnected sessions.
  func resume(request: Synchronization_ResumeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Synchronization_ResumeResponse>

  /// Reset resets sessions' histories.
  func reset(request: Synchronization_ResetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Synchronization_ResetResponse>

  /// Terminate terminates sessions.
  func terminate(request: Synchronization_TerminateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Synchronization_TerminateResponse>
}

extension Synchronization_SynchronizationProvider {
  internal var serviceName: Substring {
    return Synchronization_SynchronizationServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Create":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_CreateRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_CreateResponse>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        userFunction: self.create(request:context:)
      )

    case "List":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_ListRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_ListResponse>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        userFunction: self.list(request:context:)
      )

    case "Flush":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_FlushRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_FlushResponse>(),
        interceptors: self.interceptors?.makeFlushInterceptors() ?? [],
        userFunction: self.flush(request:context:)
      )

    case "Pause":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_PauseRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_PauseResponse>(),
        interceptors: self.interceptors?.makePauseInterceptors() ?? [],
        userFunction: self.pause(request:context:)
      )

    case "Resume":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_ResumeRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_ResumeResponse>(),
        interceptors: self.interceptors?.makeResumeInterceptors() ?? [],
        userFunction: self.resume(request:context:)
      )

    case "Reset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_ResetRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_ResetResponse>(),
        interceptors: self.interceptors?.makeResetInterceptors() ?? [],
        userFunction: self.reset(request:context:)
      )

    case "Terminate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_TerminateRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_TerminateResponse>(),
        interceptors: self.interceptors?.makeTerminateInterceptors() ?? [],
        userFunction: self.terminate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Synchronization manages the lifecycle of synchronization sessions.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Synchronization_SynchronizationAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Synchronization_SynchronizationServerInterceptorFactoryProtocol? { get }

  /// Create creates a new session.
  func create(
    request: Synchronization_CreateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Synchronization_CreateResponse

  /// List returns metadata for existing sessions.
  func list(
    request: Synchronization_ListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Synchronization_ListResponse

  /// Flush flushes sessions.
  func flush(
    request: Synchronization_FlushRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Synchronization_FlushResponse

  /// Pause pauses sessions.
  func pause(
    request: Synchronization_PauseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Synchronization_PauseResponse

  /// Resume resumes paused or disconnected sessions.
  func resume(
    request: Synchronization_ResumeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Synchronization_ResumeResponse

  /// Reset resets sessions' histories.
  func reset(
    request: Synchronization_ResetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Synchronization_ResetResponse

  /// Terminate terminates sessions.
  func terminate(
    request: Synchronization_TerminateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Synchronization_TerminateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Synchronization_SynchronizationAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Synchronization_SynchronizationServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Synchronization_SynchronizationServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Synchronization_SynchronizationServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Create":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_CreateRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_CreateResponse>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        wrapping: { try await self.create(request: $0, context: $1) }
      )

    case "List":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_ListRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_ListResponse>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        wrapping: { try await self.list(request: $0, context: $1) }
      )

    case "Flush":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_FlushRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_FlushResponse>(),
        interceptors: self.interceptors?.makeFlushInterceptors() ?? [],
        wrapping: { try await self.flush(request: $0, context: $1) }
      )

    case "Pause":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_PauseRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_PauseResponse>(),
        interceptors: self.interceptors?.makePauseInterceptors() ?? [],
        wrapping: { try await self.pause(request: $0, context: $1) }
      )

    case "Resume":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_ResumeRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_ResumeResponse>(),
        interceptors: self.interceptors?.makeResumeInterceptors() ?? [],
        wrapping: { try await self.resume(request: $0, context: $1) }
      )

    case "Reset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_ResetRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_ResetResponse>(),
        interceptors: self.interceptors?.makeResetInterceptors() ?? [],
        wrapping: { try await self.reset(request: $0, context: $1) }
      )

    case "Terminate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Synchronization_TerminateRequest>(),
        responseSerializer: ProtobufSerializer<Synchronization_TerminateResponse>(),
        interceptors: self.interceptors?.makeTerminateInterceptors() ?? [],
        wrapping: { try await self.terminate(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Synchronization_SynchronizationServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'create'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateInterceptors() -> [ServerInterceptor<Synchronization_CreateRequest, Synchronization_CreateResponse>]

  /// - Returns: Interceptors to use when handling 'list'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInterceptors() -> [ServerInterceptor<Synchronization_ListRequest, Synchronization_ListResponse>]

  /// - Returns: Interceptors to use when handling 'flush'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFlushInterceptors() -> [ServerInterceptor<Synchronization_FlushRequest, Synchronization_FlushResponse>]

  /// - Returns: Interceptors to use when handling 'pause'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseInterceptors() -> [ServerInterceptor<Synchronization_PauseRequest, Synchronization_PauseResponse>]

  /// - Returns: Interceptors to use when handling 'resume'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResumeInterceptors() -> [ServerInterceptor<Synchronization_ResumeRequest, Synchronization_ResumeResponse>]

  /// - Returns: Interceptors to use when handling 'reset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResetInterceptors() -> [ServerInterceptor<Synchronization_ResetRequest, Synchronization_ResetResponse>]

  /// - Returns: Interceptors to use when handling 'terminate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTerminateInterceptors() -> [ServerInterceptor<Synchronization_TerminateRequest, Synchronization_TerminateResponse>]
}

internal enum Synchronization_SynchronizationServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Synchronization",
    fullName: "synchronization.Synchronization",
    methods: [
      Synchronization_SynchronizationServerMetadata.Methods.create,
      Synchronization_SynchronizationServerMetadata.Methods.list,
      Synchronization_SynchronizationServerMetadata.Methods.flush,
      Synchronization_SynchronizationServerMetadata.Methods.pause,
      Synchronization_SynchronizationServerMetadata.Methods.resume,
      Synchronization_SynchronizationServerMetadata.Methods.reset,
      Synchronization_SynchronizationServerMetadata.Methods.terminate,
    ]
  )

  internal enum Methods {
    internal static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/synchronization.Synchronization/Create",
      type: GRPCCallType.unary
    )

    internal static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/synchronization.Synchronization/List",
      type: GRPCCallType.unary
    )

    internal static let flush = GRPCMethodDescriptor(
      name: "Flush",
      path: "/synchronization.Synchronization/Flush",
      type: GRPCCallType.unary
    )

    internal static let pause = GRPCMethodDescriptor(
      name: "Pause",
      path: "/synchronization.Synchronization/Pause",
      type: GRPCCallType.unary
    )

    internal static let resume = GRPCMethodDescriptor(
      name: "Resume",
      path: "/synchronization.Synchronization/Resume",
      type: GRPCCallType.unary
    )

    internal static let reset = GRPCMethodDescriptor(
      name: "Reset",
      path: "/synchronization.Synchronization/Reset",
      type: GRPCCallType.unary
    )

    internal static let terminate = GRPCMethodDescriptor(
      name: "Terminate",
      path: "/synchronization.Synchronization/Terminate",
      type: GRPCCallType.unary
    )
  }
}
