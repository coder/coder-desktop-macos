// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: url_url.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// This file was taken from
// https://github.com/mutagen-io/mutagen/tree/v0.18.1/pkg/url/url.proto
//
// MIT License
// 
// Copyright (c) 2016-present Docker, Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Kind indicates the kind of a URL.
enum Url_Kind: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Synchronization indicates a synchronization URL.
  case synchronization // = 0

  /// Forwarding indicates a forwarding URL.
  case forwarding // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .synchronization
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .synchronization
    case 1: self = .forwarding
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .synchronization: return 0
    case .forwarding: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Url_Kind] = [
    .synchronization,
    .forwarding,
  ]

}

/// Protocol indicates a location type.
enum Url_Protocol: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Local indicates that the resource is on the local system.
  case local // = 0

  /// SSH indicates that the resource is accessible via SSH.
  case ssh // = 1

  /// Docker indicates that the resource is inside a Docker container.
  case docker // = 11
  case UNRECOGNIZED(Int)

  init() {
    self = .local
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .local
    case 1: self = .ssh
    case 11: self = .docker
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .local: return 0
    case .ssh: return 1
    case .docker: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Url_Protocol] = [
    .local,
    .ssh,
    .docker,
  ]

}

/// URL represents a pointer to a resource. It should be considered immutable.
struct Url_URL: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Kind indicates the URL kind.
  /// NOTE: This field number is out of order for historical reasons.
  var kind: Url_Kind = .synchronization

  /// Protocol indicates a location type.
  var `protocol`: Url_Protocol = .local

  /// User is the user under which a resource should be accessed.
  var user: String = String()

  /// Host is protocol-specific, but generally indicates the location of the
  /// remote.
  var host: String = String()

  /// Port indicates a TCP port via which to access the remote location, if
  /// applicable.
  var port: UInt32 = 0

  /// Path indicates the path of a resource.
  var path: String = String()

  /// Environment contains captured environment variable information. It is not
  /// a required component and its contents and their behavior depend on the
  /// transport implementation.
  var environment: Dictionary<String,String> = [:]

  /// Parameters are internal transport parameters. These are set for URLs
  /// generated internally that require additional metadata. Parameters are not
  /// required and their behavior is dependent on the transport implementation.
  var parameters: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "url"

extension Url_Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Synchronization"),
    1: .same(proto: "Forwarding"),
  ]
}

extension Url_Protocol: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Local"),
    1: .same(proto: "SSH"),
    11: .same(proto: "Docker"),
  ]
}

extension Url_URL: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".URL"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .same(proto: "kind"),
    1: .same(proto: "protocol"),
    2: .same(proto: "user"),
    3: .same(proto: "host"),
    4: .same(proto: "port"),
    5: .same(proto: "path"),
    6: .same(proto: "environment"),
    8: .same(proto: "parameters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.`protocol`) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.user) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.host) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.port) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.environment) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.parameters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.`protocol` != .local {
      try visitor.visitSingularEnumField(value: self.`protocol`, fieldNumber: 1)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 2)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 3)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 4)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 5)
    }
    if !self.environment.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.environment, fieldNumber: 6)
    }
    if self.kind != .synchronization {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 7)
    }
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.parameters, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Url_URL, rhs: Url_URL) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.user != rhs.user {return false}
    if lhs.host != rhs.host {return false}
    if lhs.port != rhs.port {return false}
    if lhs.path != rhs.path {return false}
    if lhs.environment != rhs.environment {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
